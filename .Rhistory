## library(UsingR) ## companion to Introduction to statistics with R, Verzani
## Tools/utilities
library(ROCR)
Default %<>% mutate(bin_def = if_else(default=="Yes", 1, 0))
default_glm_2p <- glm(bin_def ~ balance + student,
data=Default, family=binomial)
with(Default, plot(balance, bin_def, pch=20, col="gold2",
ylim = c(-.04,1), xlim=c(0, max(balance)),
ylab = "Probability of default"))
pred_bin <- as.numeric(default_glm_2p$fitted > .5)
lines(bin_def ~ balance, data=pred_data, lwd=3, col="navyblue")
pred_bin <- as.numeric(default_glm_2p$fitted > .5)
lines(pred_bin ~ Default$balance, lwd=3, col="navyblue")
lines(fitted(default_glm_2p) ~ balance, data=pred_data, lwd=3, col="navyblue")
with(Default, plot(balance, bin_def, pch=20, col="gold2",
ylim = c(-.04,1), xlim=c(0, max(balance)),
ylab = "Probability of default"))
lines(fitted(default_glm_2p)~ balance, data=pred_data, lwd=3, col="navyblue")
lines(fitted(default_glm_2p) ~ balance, data=Default, lwd=3, col="navyblue")
with(Default, plot(balance, bin_def, pch=20, col="gold2",
ylim = c(-.04,1), xlim=c(0, max(balance)),
ylab = "Probability of default"))
lines(fitted(default_glm_2p) ~ balance, data=Default, lwd=3, col="navyblue")
Default %<>% mutate(bin_def = if_else(default=="Yes", 1, 0))
Default %<>% arrange(by=balance)
default_glm_2p <- glm(bin_def ~ balance + student,
data=Default, family=binomial)
pred_data <- data.frame(balance= seq(from=min(Default$balance), to=max(Default$balance),len=100))
pred_data$bin_def <- predict(default_glm, newdata=pred_data, type="response")
Default %<>% mutate(bin_def = if_else(default=="Yes", 1, 0))
Default %<>% arrange(by=balance)
default_glm_2p <- glm(bin_def ~ balance + student,
data=Default, family=binomial)
pred_data <- data.frame(balance= seq(from=min(Default$balance), to=max(Default$balance),len=100))
pred_data$bin_def <- predict(default_glm_2p, newdata=pred_data, type="response")
with(Default, plot(balance, bin_def, pch=20, col="gold2",
ylim = c(-.04,1), xlim=c(0, max(balance)),
ylab = "Probability of default"))
Default %<>% mutate(bin_def = if_else(default=="Yes", 1, 0))
Default %<>% arrange(by=balance)
default_glm_2p <- glm(bin_def ~ balance + student,
data=Default, family=binomial)
with(Default, plot(balance, bin_def, pch=20, col="gold2",
ylim = c(-.04,1), xlim=c(0, max(balance)),
ylab = "Probability of default"))
lines(fitted(default_glm_2p) ~ balance, data=Default, lwd=3, col="navyblue")
View(Default)
with(Default, plot(balance, bin_def, pch=20, col="gold2",
ylim = c(-.04,1), xlim=c(0, max(balance)),
ylab = "Probability of default"))
stud_Idx <- which(Default$student=="Yes")
lines(fitted(default_glm_2p)[stud_Idx] ~ balance[stud_Idx], data=Default, lwd=3, col="navyblue")
lines(fitted(default_glm_2p)[stud_yes] ~ balance[stud_yes], data=Default, lwd=3, col="navyblue")
lines(fitted(default_glm_2p)[stud_yes] ~ balance[stud_yes], data=Default, lwd=3, col="darchorchid3")
stud_yes <- which(Default$student=="Yes")
stud_no <- which(Default$student=="Yes")
lines(fitted(default_glm_2p)[stud_yes] ~ balance[stud_yes], data=Default, lwd=3, col="navyblue")
lines(fitted(default_glm_2p)[stud_yes] ~ balance[stud_yes], data=Default, lwd=3, col="darchorchid3")
with(Default, plot(balance, bin_def, pch=20, col="gold2",
ylim = c(-.04,1), xlim=c(0, max(balance)),
ylab = "Probability of default"))
stud_yes <- which(Default$student=="Yes")
stud_no <- which(Default$student=="Yes")
lines(fitted(default_glm_2p)[stud_yes] ~ balance[stud_yes], data=Default, lwd=3, col="navyblue")
lines(fitted(default_glm_2p)[stud_yes] ~ balance[stud_yes], data=Default, lwd=3, col="darkorchid3")
with(Default, plot(balance, bin_def, pch=20, col="gold2",
ylim = c(-.04,1), xlim=c(0, max(balance)),
ylab = "Probability of default"))
stud_yes <- which(Default$student=="Yes")
stud_no <- which(Default$student=="Yes")
lines(fitted(default_glm_2p)[stud_yes] ~ balance[stud_yes], data=Default, lwd=3, col="navyblue")
lines(fitted(default_glm_2p)[stud_no] ~ balance[stud_no], data=Default, lwd=3, col="darkorchid3")
with(Default, plot(balance, bin_def, pch=20, col="gold2",
ylim = c(-.04,1), xlim=c(0, max(balance)),
ylab = "Probability of default"))
stud_yes <- which(Default$student=="Yes")
stud_no <- which(Default$student=="No")
lines(fitted(default_glm_2p)[stud_yes] ~ balance[stud_yes], data=Default, lwd=3, col="navyblue")
lines(fitted(default_glm_2p)[stud_no] ~ balance[stud_no], data=Default, lwd=3, col="darkorchid3")
default_glm <- glm(bin_def ~ balance, data=Default, family=binomial)
pred_data <- data.frame(balance=seq(from=min(Default$balance), to=max(Default$balance),len=100))
pred_data$bin_def <- predict(default_glm, newdata=pred_data, type="response")
View(pred_data)
knitr::opts_chunk$set(echo = TRUE)
source("../commonFiles/packages.R")
pred_data <- data.frame(balance=rep(seq(from=min(Default$balance), to=max(Default$balance),len=100), 2), student=c( rep("Yes", 100), rep("No", 100) ))
pred_data$p_pred <- predict(default_glm_2p, newdata=pred_data, type="response")
?predict
?predict.glm
?predict.lm
pred_data$p_pred <- predict(default_glm_2p, newdata=pred_data, type="response", interval="confidence")
View(pred_data)
pred_data$p_pred <- predict(default_glm_2p, newdata=pred_data, type="response", interval="confidence")
default_glm_more <- glm(bin_def ~ balance + student + income,
data=Default, family=binomial)
default_glm_probit <- glm(bin_def ~ balance + student + income,
data=Default, family=binomial(link="probit"))
default_glm_more
default_glm_probit
5.737e-03/2.821e-03
-6.468e-01/(-2.960e-01)
3.033e-06/2.101e-06
-1.087e+01 /(-5.475e+00)
frisk_with_noise <- read_table2(file.path(path2media, "frisk_with_noise.csv"), skip = 6)
frisk_with_noise %<>% filter(past.arrests>0)
glm2 <- glm(formula = stops ~ factor(eth) + factor(precinct),
family=poisson,
offset=log(past.arrests),
data=frisk_with_noise)
plot(residuals(glm2) ~ fitted(glm2),
xlab="fitted values", ylab="residuals",
pch=20, col="navyblue")
abline(h=0, col="darkorange3")
## plot(fitted(glm2), residuals(glm2), pch=20, col="navyblue", ylab="residuals", xlab="fitted values")
plot(residuals(glm2)/sqrt(fitted(glm2 )) ~ fitted(glm2),
xlab="fitted values", ylab="residuals",
pch=20, col="navyblue")
abline(h=0, col="darkorange3")
abline(h=2, col="darkorange3", lty=2)
abline(h=-2, col="darkorange3", lty=2)
X <- aggregate(cbind(stops, past.arrests) ~ precinct + eth, data=frisk_with_noise, sum)
glmX <- glm(formula = stops ~ factor(eth) + factor(precinct),
family=poisson,
offset=log(past.arrests),
data=X)
plot(residuals(glmX) ~ fitted(glmX),
xlab="fitted values", ylab="residuals",
pch=20, col="navyblue")
abline(h=0, col="darkorange3")
plot(residuals(glmX)/sqrt(fitted(glmX )) ~ fitted(glmX),
xlab="fitted values", ylab="standardised residuals",
pch=20, col="navyblue")
abline(h=0, col="darkorange3")
abline(h=2, col="darkorange3", lty=2)
abline(h=-2, col="darkorange3", lty=2)
cbind(frisk_with_noise$stops, frisk_with_noise$past.arrests)
head(cbind(frisk_with_noise$stops, frisk_with_noise$past.arrests))
?aggregate
X <- aggregate(cbind(stops, arrests) ~ precinct + eth, data=frisk_with_noise, sum)
fit.1 <- glm(stops~1,family=poisson,offset=log(arrests),data=X,
subset=arrests>0)
display(fit.1)
X <- aggregate(cbind(stops, past.arrests) ~ precinct + eth, data=frisk_with_noise, sum)
fit.1 <- glm(stops~1,family=poisson,offset=log(arrests),data=X,
subset=arrests>0)
display(fit.1)
X <- aggregate(cbind(stops, past.arrests) ~ precinct + eth, data=frisk_with_noise, sum)
fit.1 <- glm(stops~1,family=poisson,offset=log(past.arrests),data=X,
subset=past.arrests>0)
display(fit.1)
fit.1
plot(residuals(fit.1) ~ fitted(fit.1),
xlab="fitted values", ylab="residuals",
pch=20, col="navyblue")
abline(h=0, col="darkorange3")
plot(residuals(fit.1)/sqrt(fitted(fit.1)) ~ fitted(fit.1),
xlab="fitted values", ylab="residuals",
pch=20, col="navyblue")
abline(h=0, col="darkorange3")
X <- aggregate(cbind(stops, past.arrests) ~ precinct + eth, data=frisk_with_noise, sum)
glmX <- glm(formula = stops ~ 1,
family=poisson,
offset=log(past.arrests),
data=X)
plot(residuals(glmX) ~ fitted(glmX),
xlab="fitted values", ylab="residuals",
pch=20, col="navyblue")
abline(h=0, col="darkorange3")
plot(residuals(glmX)/sqrt(fitted(glmX )) ~ fitted(glmX),
xlab="fitted values", ylab="standardised residuals",
pch=20, col="navyblue")
abline(h=0, col="darkorange3")
abline(h=2, col="darkorange3", lty=2)
abline(h=-2, col="darkorange3", lty=2)
X <- aggregate(cbind(stops, past.arrests) ~ precinct + eth, data=frisk_with_noise, sum)
glmX <- glm(formula = stops ~ 1,
family=poisson,
offset=log(past.arrests),
data=X)
plot(residuals(glmX) ~ fitted(glmX),
xlab="fitted values", ylab="residuals",
pch=20, col="navyblue")
abline(h=0, col="darkorange3")
plot(residuals(glmX)/sqrt(fitted(glmX )) ~ fitted(glmX),
xlab="fitted values", ylab="standardised residuals",
pch=20, col="navyblue")
abline(h=0, col="darkorange3")
abline(h=2, col="darkorange3", lty=2)
abline(h=-2, col="darkorange3", lty=2)
X <- aggregate(cbind(stops, past.arrests) ~ precinct + eth, data=frisk_with_noise, sum)
glmX <- glm(formula = stops ~ factor(eth) + factor(precinct),
family=poisson,
offset=log(past.arrests),
data=X)
plot(residuals(glmX) ~ fitted(glmX),
xlab="fitted values", ylab="residuals",
pch=20, col="navyblue")
abline(h=0, col="darkorange3")
plot(residuals(glmX)/sqrt(fitted(glmX )) ~ fitted(glmX),
xlab="fitted values", ylab="standardised residuals",
pch=20, col="navyblue")
abline(h=0, col="darkorange3")
abline(h=2, col="darkorange3", lty=2)
abline(h=-2, col="darkorange3", lty=2)
frisk.sum <- frisk_with_noise %>%
group_by(precinct, eth) %>%
summarise(stops = sum(stops), past.arrests = sum(past.arrests), pop = mean(pop))
precinct.glm = glm(stops ~ factor(eth) + factor(precinct), family = poisson, offset = log(past.arrests), data = frisk.sum)
precinct.glm
head(precinct.glm)
?augment
precinct.glm = glm(stops ~ factor(eth) + factor(precinct), family = poisson, offset = log(past.arrests), data = frisk.sum)
precinct.glm.df = augment(precinct.glm, type.predict = "response", type.residuals = "response")
library(broom)
precinct.glm = glm(stops ~ factor(eth) + factor(precinct), family = poisson, offset = log(past.arrests), data = frisk.sum)
precinct.glm.df = augment(precinct.glm, type.predict = "response", type.residuals = "response")
plot(precinct.glm.df$.fitted, precinct.glm.df$.resid)
View(frisk.sum)
View(X)
X <- aggregate(cbind(stops, past.arrests) ~ precinct + eth, data=frisk_with_noise, sum)
glmX <- glm(stops ~ factor(eth) + factor(precinct),
family=poisson,
offset=log(past.arrests),
data=X)
plot(residuals(glmX) ~ fitted(glmX),
xlab="fitted values", ylab="residuals",
pch=20, col="navyblue")
abline(h=0, col="darkorange3")
plot(residuals(precinct.glm) ~ fitted(precinct.glm),
xlab="fitted values", ylab="residuals",
pch=20, col="navyblue")
abline(h=0, col="darkorange3")
plot(precinct.glm.df$.fitted ~ precinct.glm.df$.resid,
xlab="fitted values", ylab="residuals",
pch=20, col="navyblue")
abline(h=0, col="darkorange3")
plot(precinct.glm.df$.resid ~ precinct.glm.df$.fitted,
xlab="fitted values", ylab="residuals",
pch=20, col="navyblue")
abline(h=0, col="darkorange3")
?predict.glm
?residuals
residuals(precinct.glm)
residuals(precinct.glm, "response")
.8*.4
1/.8
.79^2
.4*2.5
30*.4
300000000/10000
300000000/10000000
300000000*.4
1/2.5
1/.4
2.5*.4
1/.25
75*4
?arrange
frisk_with_noise %>% arrange(precinct, crime) %>% View()
frisk_with_noise %>% arrange(precinct, eth, crime) %>% View()
frisk_with_noise %>% arrange(precinct, eth) %>% View()
View(frisk.sum)
frisk_with_noise %>%
group_by(precinct, eth) %>%
summarise(stops = sum(stops),
past.arrests = sum(past.arrests)) -> frisk_sum
View(frisk_sum)
frisk_with_noise %>%
group_by(precinct, eth) %>%
summarise(stops = sum(stops),
past.arrests = sum(past.arrests),
pop = mean(pop)) -> frisk_sum
View(frisk.sum)
frisk_sum %>% arrange(precinct, eth) %>%
filter(row_number()<13) %>% kable()
frisk_sum %>% ungroup() %>% arrange(precinct, eth) %>%
filter(row_number()<13) %>% kable()
View(frisk.sum)
q()
?lung
sub_n <- 7
set.seed(1881)
lung %>% sample_n(sub_n) -> lung_sub11
## Packages for the animation
# install.packages("gganimate")
# install.packages("gifski")
# install.packages("png")
library(gganimate)
sub_n <- 7
set.seed(1881)
lung %>% sample_n(sub_n) -> lung_sub11
path2media <- "regmod_in_files"
path2out <- "regmod_out_files"
# install.packages("broom")
# install.packages("tidyverse")
# install.package("data.table")
# install.packages("kableExtra")
# install.packages("magrittr")
# install.packages(c("dslabs", "gapminder"))
# install.packages(c("ggrepel", "ggthemes"))
# install.packages("UsingR") ## for Galton data
# install.packages("moderndive")
# install.packages("skimr")
# install.packages("ROCR") ## roc curves
# install.packages("arm")
# install.packages("ggfortify")
# install.packages("survminer")
# install.packages("gtsummary")
## Packages for the animation
# install.packages("gganimate")
# install.packages("gifski")
# install.packages("png")
library(gganimate)
library(gifski)
library(png)
library(tidyverse) ## includes dplyr, ggplot2
library(data.table)
library(moderndive)
library(broom)
library(skimr)
library(knitr)
# library(kableExtra)
library(magrittr)
library(ggthemes)
library(ggrepel)
## Datasets
library(dslabs) ## ! both include gapminder
library(gapminder)
library(HistData) ## datasets of history of statistics
## library(UsingR) ## companion to Introduction to statistics with R, Verzani
## Tools/utilities
## Classification
library(ROCR)
## Survival analysis
library(survival)
library(survminer)
library(ggfortify) ## maybe not needed, if only for autoplot
library(gtsummary)
sub_n <- 7
set.seed(1881)
lung %>% sample_n(sub_n) -> lung_sub11
lung_sub11 %>% arrange(time) %>% kable()
km_lung_sub <-  with(lung_sub11, Surv(time, status))
km_lung_sub_fit <- survfit(Surv(time, status) ~ 1, data=lung_sub11)
km_summ <- summary(km_lung_sub_fit)
km_probs <- data.frame(time=km_lung_sub_fit$time,
n_event=km_lung_sub_fit$n.event,
n_risk=km_lung_sub_fit$n.risk,
survival=km_lung_sub_fit$surv) %>%
mutate(`n_risk-n_event` = n_risk-n_event,
p_no_interval=1-n_event/n_risk) %>%
select(-survival, -p_no_interval, everything())
km_probs %>% kable()
plot(km_lung_sub_fit, mark.time=TRUE, conf.int=FALSE, lwd=2, col="navyblue")
x <- c(0,km_lung_sub_fit$time)
y <- c(1,km_lung_sub_fit$surv)
points(x,y, pch=19, col="dodgerblue")
lung_sub11 %>% select(time, status) %>% filter(status==1) %>% pull(time) %>% sort() -> t_censor
points(t_censor, y[which(x %in% t_censor)], col="indianred3", pch=18, cex=1.6)
## Re-create KM curve
# x <- c(1, km_lung_sub_fit$time, max(km_lung_sub_fit$time))
# y <- c(1, 1, km_lung_sub_fit$surv)
# plot(x,y, type="S")
km_lung_fit <- survfit(Surv(time, status) ~ 1, data=lung)
summary(km_lung_fit, times=c(1,30,60,120, 360*(1:2)))
plot(km_lung_fit, mark.time=TRUE, lwd=2, col="navyblue",
xlab = "Time t in days", ylab = "S(t)")
print(km_lung_fit)
paste(median(lung$time), lung %>% filter(status==2) %>% pull(time) %>% median())
km_lung_fit_sex <- survfit(Surv(time, status) ~ sex, data=lung)
plot(km_lung_fit_sex, col=c("navyblue", "indianred3"))
legend(900, .9, legend=c("male", "female"), fill=c("navyblue", "indianred3"))
summary(km_lung_fit_sex)$table %>% kable()
ggsurv_lung <- ggsurvplot(km_lung_fit, data = lung, risk.table = TRUE, cumevents = TRUE,
risk.table.title = "Number at Risk",
cumevents.title = "Cumulative Number of Events",
risk.table.height = 0.15, cumevents.height = 0.15,
risk.table.y.text = FALSE,
cumevents.y.text = FALSE,
fontsize=4
)
# Customizing tables and print
ggsurv_lung$table <- ggsurv_lung$table  + theme_cleantable() + theme(plot.title = element_text(size=12))
ggsurv_lung$cumevents <- ggsurv_lung$cumevents + theme_cleantable() + theme(plot.title = element_text(size=12))
# print
ggsurv_lung
?lung
ggsurv_lung_sex <- ggsurvplot(km_lung_fit_sex, data = lung, xlab="Days",
risk.table = TRUE, ncensor.plot = TRUE, fontsize=4,
risk.table.title = "Number at Risk",
ncensor.plot.title = "Number of Censoring",
risk.table.height = 0.15, risk.table.y.text = FALSE,
pval = TRUE, conf.int = TRUE, surv.median.line = "hv",
legend.labs = c("Male", "Female"), ## customise labels
palette = c("navyblue", "indianred3")
## customise colour palette
)
# Customizing tables and print
ggsurv_lung_sex$table <- ggsurv_lung_sex$table  + theme_cleantable() +
theme(plot.title = element_text(size=12))
ggsurv_lung_sex$ncensor.plot <- ggsurv_lung_sex$ncensor.plot + theme_cleantable() +
theme(plot.title = element_text(size=12))
ggsurv_lung_sex
ggsurvplot(km_lung_fit_sex, conf.int = TRUE, fun = "event", xlab="Days",
legend.labs = c("Male", "Female"), palette = c("navyblue", "indianred3") )
lung_diff_sex <- survdiff(Surv(time, status) ~ sex, data = lung)
lung_diff_sex
coxph(Surv(time, status) ~ sex, data = lung)
broom::tidy(coxph(Surv(time, status) ~ sex, data = lung), exp = TRUE) %>% kable()
coxph(Surv(time, status) ~ sex, data = lung) %>%
gtsummary::tbl_regression(exp=TRUE)
data(veteran)
veteran %>% arrange(time) %>% filter(row_number() < 10) %>% kable()
km_data <- with(veteran, Surv(time, status))
## !!second argument matches event if only 2 arguments are given
head(km_data)
km_fit <- survfit(Surv(time, status) ~ 1, data=veteran)
summary(km_fit, times = c(1,30,60,90*(1:10)))
autoplot(km_fit)
km_trt_fit <- survfit(Surv(time, status) ~ trt, data=veteran)
autoplot(km_trt_fit)
?coxph
coxph(Surv(time, status) ~ factor(sex), data = lung)
broom::tidy(coxph(Surv(time, status) ~ sex, data = lung), exp = TRUE) %>% kable()
(1 - .6)/1
quantile(km_lung_fit)
quantile(km_lung_fit)
?quantile
names(realEstates)
knitr::opts_chunk$set(echo = FALSE)
source("../commonFiles/packages.R")
realEstates=read.delim("http://sites.williams.edu/rdeveaux/files/2014/09/Saratoga.txt")
realEstates %<>% mutate(Fireplace = factor(Fireplaces>0, labels=c("No", "Yes")) )
realEstates %>% select(Price, Living.Area, Fireplace, Age) %>% sample_n(11) %>% kable()
lm1 <- lm(Price ~ Living.Area + Fireplace, data=realEstates)
options(scipen=1,digits=3)
summary(lm1)
names(realEstates)
View(realEstates)
View(realEstates)
?deatch
?detach
?unload
setwd("~/jData/jLibellus/entryFiles/annlia.github.io/")
serve_site()
library(blogdown)
serve_site()
serve_site()
servr::daemon_stop("140238946531416")
serve_site()
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse) ## includes dplyr, ggplot2
library(data.table)
library(knitr)
library(magrittr)
realEstates=read.delim("http://sites.williams.edu/rdeveaux/files/2014/09/Saratoga.txt")
realEstates %<>% mutate(Fireplace = factor(Fireplaces>0, labels=c("No", "Yes")) )
realEstates %>%
select(Price, Living.Area, Fireplace, Age, Land.Value, Rooms, Bedrooms, Bathrooms, Waterfront) %>%
sample_n(11) %>% kable()
lm1 <- lm(Price ~ Living.Area + Fireplace, data=realEstates)
options(scipen=1,digits=3)
summary(lm1)
confint(lm1)
ceiling(confint(lm1)/1000)*1000
titanic <- read_csv("regmod_in_files/titanic.csv")
titanic %<>% mutate(pclass_f = factor(pclass),
age10 = age/10) %>%
filter(!is.na(age))
## Discarding observations with missing age
## There also appear to be an entire row of missing value when reading titanic.csv
titanic %>%
select(survived, sex, pclass_f, age, age10, sibsp, parch) %>%
sample_n(11) %>% kable(caption="Random selection of observations and a subset of the available variable")
titanic_lr <- glm(survived ~ sex + age10 + pclass_f, data=titanic)
titanic_lr
library(kableExtra)
inSample <- data.frame(p_pred =predict(titanic_lr, type="response"))
inSample$bin_pred <- as.numeric(inSample > .5)
acc <- mean(titanic$survived==inSample$bin_pred)*100 ## accuracy
truePred <- bind_cols(true=factor(titanic$survived), pred=factor(inSample$bin_pred))
confTb <- as.data.frame.matrix(table(truePred))
TP <- confTb["1", "1"]
FP <- confTb["0", "1"]
TN <- confTb["0", "0"]
FN <- confTb["1", "0"]
confTb %>%
rownames_to_column(var="True") %>%
arrange(desc(True)) %>%
select("True", "1","0") %>%
kable(caption="Titanic confusion matrix, 1:survived, 0:did not survive") %>%
add_header_above(c("", "Predicted" = 2), bold=T)
## caret::confusionMatrix(truePred$pred, truePred$true, positive="1", mode="everything")
titanic_lr
titanic_lr$age10
coef(titanic_lr)
coef(titanic_lr)$age10
coef(titanic_lr)['age10']
summary(titanic_lr)
exp(-5.66)
setwd("~/jData/jLibellus/entryFiles/annlia.github.io")
serve_site()
servr::daemon_stop("140238947846040")
serve_site()
servr::daemon_stop("140238947847448")
serve_site()
setwd("~/jData/jLibellus/entryFiles/annlia.github.io/content/jclub")
schedule <- read_csv("schedule2020.csv")
View(schedule)
serve_site()
servr::daemon_stop("140238947932296")
q()
