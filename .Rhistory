OR
pop <- 10^6
pE <- .25 ## Smoking prevalence in Switzerland
pD1 <- .18 ## Lung cancer prevalence in smokers
pD0 <- .01 ## Lung cancer prevalence in never smokers
nE1 <- pE*pop
nE0 <- pop-nE1
# pE <- .01
# pD1 <- .18
## https://smw.ch/article/doi/smw.2017.14437
## https://ourworldindata.org/smoking
# nDexp <- sample(c(0,1), size=nE1, replace=TRUE, prob=c(1-pD, pD))
# nDnot_exp <- sample(c(0,1), size=nE0, replace=TRUE, prob=c(1-pD, pD))
library(tidyverse)
set.seed(20220226)
dataD <- tibble(exposed = c(rep(1, nE1), rep(0, nE0)),
disease = c(sample(c(0,1), size=nE1, replace=TRUE, prob=c(1-pD1, pD1)),
sample(c(0,1), size=nE0, replace=TRUE, prob=c(1-pD0, pD0)) ) )
pDexp <- dataD %>% filter(exposed>0) %>% pull(disease) %>% mean()
pDnot_exp <- dataD %>% filter(exposed<1) %>% pull(disease) %>% mean()
RR <- pDexp/pDnot_exp
OR <- (pDexp/(1-pDexp))/(pDnot_exp/(1-pDnot_exp))
RR
OR
pop <- 10^6
pE <- .25 ## Smoking prevalence in Switzerland
pD1 <- .18 ## Lung cancer prevalence in smokers
pD0 <- .01 ## Lung cancer prevalence in never smokers
nE1 <- pE*pop
nE0 <- pop-nE1
RR <- PD1/PD0
OR <- (PD1/(1-PD1))/(PD0/(1-PD0))
1/17
pop <- 10^6
pE <- .25 ## Smoking prevalence in Switzerland
pD1 <- .18 ## Lung cancer prevalence in smokers
pD0 <- .01 ## Lung cancer prevalence in never smokers
nE1 <- pE*pop
nE0 <- pop-nE1
RR <- pD1/pD0
OR <- (pD1/(1-pD1))/(pD0/(1-pD0))
RR
OR
pD <- pE*pD1 + (1-pE)*pD0
pD
pE/pD0
?seq
pE <- seq(from=.25, to=.01, by=.01) ## Smoking prevalence in Switzerland
pE <- seq(from=.25, to=.01, by=-.01) ## Smoking prevalence in Switzerland
pE
pD0 <- pE/25
pD <- pE*pD1 + (1-pE)*pD0
pD
pE <- seq(from=.25, to=.01, by=-.01) ## Smoking prevalence in Switzerland
pD1 <- .18 ## Lung cancer prevalence in smokers
pD0 <- .01 ## Lung cancer prevalence in never smokers
pD0 <- pE/25
pD <- pE*pD1 + (1-pE)*pD0
RR <- pD1/pD0
OR <- (pD1/(1-pD1))/(pD0/(1-pD0))
RR
OR
xi
xi <- RR/OR
plot(pD, xi, type="b")
xi <- (RR/OR)^{-1}
plot(pD, xi, type="b")
pE <- seq(from=.25, to=.005, by=-.001) ## Smoking prevalence in Switzerland
pD1 <- .18 ## Lung cancer prevalence in smokers
pD0 <- .01 ## Lung cancer prevalence in never smokers
pD0 <- pE/25
pD <- pE*pD1 + (1-pE)*pD0
RR <- pD1/pD0
OR <- (pD1/(1-pD1))/(pD0/(1-pD0))
RR
OR
xi <- (RR/OR)^{-1}
plot(pD, xi, type="b")
pE <- seq(from=.25, to=.01, by=-.01) ## Smoking prevalence in Switzerland
pD1 <- .18 ## Lung cancer prevalence in smokers
pD0 <- .01 ## Lung cancer prevalence in never smokers
pD0 <- pE/25
pD <- pE*pD1 + (1-pE)*pD0
RR <- pD1/pD0
OR <- (pD1/(1-pD1))/(pD0/(1-pD0))
RR
OR
xi <- (RR/OR)^{-1}
plot(pD, xi, type="b")
pE <- seq(from=.25, to=.01, by=-.01) ## Smoking prevalence in Switzerland
pD1 <- .18 ## Lung cancer prevalence in smokers
pD0 <- .01 ## Lung cancer prevalence in never smokers
pD0 <- pE/25
pD <- pE*pD1 + (1-pE)*pD0
RR <- pD1/pD0
OR <- (pD1/(1-pD1))/(pD0/(1-pD0))
RR
OR
xi <- (RR/OR)^{-1}
plot(pD, xi, type="b", pch=20)
1/0.72
1/0.82
plot(1/pD, xi, type="b", pch=20)
# pE <- seq(from=.25, to=.01, by=-.01) ## Smoking prevalence in Switzerland
pE <- 1/4:100
pD1 <- .18 ## Lung cancer prevalence in smokers
# pD0 <- .01 ## Lung cancer prevalence in never smokers
pD0 <- pE/25
pD <- pE*pD1 + (1-pE)*pD0
RR <- pD1/pD0
OR <- (pD1/(1-pD1))/(pD0/(1-pD0))
RR
OR
xi <- (RR/OR)^{-1}
plot(1/pD, xi, type="b", pch=20)
plot(pD, xi, type="b", pch=20)
plot(1-pD, xi, type="b", pch=20)
pE <- seq(from=.25, to=.01, by=-.01) ## Smoking prevalence in Switzerland
# pE <- 1/4:100
pD1 <- .18 ## Lung cancer prevalence in smokers
# pD0 <- .01 ## Lung cancer prevalence in never smokers
pD0 <- pE/25
pD <- pE*pD1 + (1-pE)*pD0
RR <- pD1/pD0
OR <- (pD1/(1-pD1))/(pD0/(1-pD0))
RR
OR
xi <- (RR/OR)^{-1}
plot(1-pD, xi, type="b", pch=20)
pE <- seq(from=.55, to=.01, by=-.01) ## Smoking prevalence in Switzerland
# pE <- 1/4:100
pD1 <- .18 ## Lung cancer prevalence in smokers
# pD0 <- .01 ## Lung cancer prevalence in never smokers
pD0 <- pE/25
pD <- pE*pD1 + (1-pE)*pD0
RR <- pD1/pD0
OR <- (pD1/(1-pD1))/(pD0/(1-pD0))
RR
OR
xi <- (RR/OR)^{-1}
plot(1-pD, xi, type="b", pch=20)
pE <- seq(from=.25, to=.01, by=-.01) ## Smoking prevalence in Switzerland
# pE <- 1/4:100
pD1 <- .18 ## Lung cancer prevalence in smokers
# pD0 <- .01 ## Lung cancer prevalence in never smokers
pD0 <- pE/25
pD <- pE*pD1 + (1-pE)*pD0
RR <- pD1/pD0
OR <- (pD1/(1-pD1))/(pD0/(1-pD0))
RR
pE <- seq(from=.25, to=.01, by=-.01) ## Smoking prevalence in Switzerland
# pE <- 1/4:100
pD1 <- .18 ## Lung cancer prevalence in smokers
# pD0 <- .01 ## Lung cancer prevalence in never smokers
pD0 <- pE/25
pD <- pE*pD1 + (1-pE)*pD0
RR <- pD1/pD0
OR <- (pD1/(1-pD1))/(pD0/(1-pD0))
RR
OR
xi <- (RR/OR)
plot(pD, xi, type="b", pch=20)
plot(RR, xi, type="b", pch=20)
plot(OR, xi, type="b", pch=20, add=TRUE)
lines(OR, xi, type="b", pch=20, add=TRUE)
plot(RR, xi, type="b", pch=20)
plot(OR, xi, type="b", pch=20, add=TRUE)
plot(RR, xi, type="b", pch=20)
points(OR, xi, type="b", pch=20, add=TRUE)
points(OR, xi, type="b", pch=20, col="blue")
plot(xi, pD, type="b", pch=20)
plot(xi, RR, type="b", pch=20)
points(OR, xi, type="b", pch=20, col="blue")
plot(pD, xi, type="b", pch=20)
plot(xi, RR, type="b", pch=20)
points(xi, OR, type="b", pch=20, col="blue")
plot(pD, RR, type="b", pch=20)
points(pD, OR, type="b", pch=20, col="blue")
plot(pD, OR, type="b", pch=20)
points(pD, RR, type="b", pch=20, col="blue")
pE <- seq(from=.25, to=.01, by=-.01) ## Smoking prevalence in Switzerland
# pE <- 1/4:100
pD1 <- .18 ## Lung cancer prevalence in smokers
# pD0 <- .01 ## Lung cancer prevalence in never smokers
pD0 <- pE/25
pD <- pE*pD1 + (1-pE)*pD0
RR <- pD1/pD0
OR <- (pD1/(1-pD1))/(pD0/(1-pD0))
RR
OR
xi <- (RR/OR)
plot(pD, xi, type="b", pch=20)
plot(pD, OR, type="b", pch=20)
points(pD, RR, type="b", pch=20, col="blue")
length(pE)
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
warning = FALSE)
library(tidyverse)
library(knitr)
library(magrittr)
library(foreign) ## for read.dta() function
library(foreign)
dat <- read.dta("https://stats.idre.ucla.edu/stat/data/ologit.dta")
library(MASS) ## for polr regression
test_polr <- polr(apply ~ public*gpa, data = dat, Hess=TRUE)
summary(test_polr)
confint(test_polr)
library(interplot)
library(ggthemes)
# Use directly predictions to make plot? But we would need to predict for all values of gpa, both public=1 and public=0
# predict(test_polr, dat)
dat %>% pull(gpa) %>% sort() -> gpa_sort
## new_dat <- tibble(gpa=rep(gpa_sort, 2), public=rep(c(0,1), each=length(gpa_sort)) )
## it should be possible to use pivot from this to get the same data as below, but it's just faster manually
new_dat0 <- tibble(gpa=gpa_sort, public=rep(0, length(gpa_sort) ) )
new_dat1 <- tibble(gpa=gpa_sort, public=rep(1, length(gpa_sort) ) )
predict(test_polr, new_dat0, type="probs") -> pred0
colnames(pred0) <- c("p0_1", "p0_2", "p0_3")
pred0 %<>% as_tibble()
predict(test_polr, new_dat1, type="probs") -> pred1
colnames(pred1) <- c("p1_1", "p1_2", "p1_3")
pred1 %<>% as_tibble()
## It would appear as if colnames should be inverted, why???
get_OR <- function(p,q) (p*(1-q))/((1-p)*q)
bind_cols(gpa=gpa_sort, pred0, pred1) %>%
mutate(OR1 = get_OR(p1_1, p0_1),
OR2 = get_OR(p1_2, p0_2),
OR3 = get_OR(p1_3, p0_3),
p0_12 = p0_1+p0_2, p1_12 = p1_1+p1_2,
p0_12 = p0_1+p0_2, p1_12 = p1_1+p1_2,
OR_less2 = get_OR(p1_12, p0_12)) -> new_dat
## The conditional odds assumption means that OR2 and OR_less2 should be identical
## Included as a sanity check
ggplot(data=new_dat, aes(x=gpa, y=OR1)) +
geom_line(col="orange") +
#  geom_line(aes(y=OR2), col="blue") +
#  geom_line(aes(y=OR3), col="red") +
xlab("OR")
## Check that the line estimated from the coefficients is the same
beta1 <- coef(test_polr)["public"]
gam1 <- coef(test_polr)["public:gpa"]
ci_polr <- confint(test_polr)
beta1_lwr <- ci_polr[1,1]
beta1_upr <- ci_polr[1,2]
gam1_lwr <- ci_polr[3,1]
gam1_upr <- ci_polr[3,2]
tibble(gpa=gpa_sort) %>%
mutate(OR=1/exp(beta1 + gam1*gpa), inv_OR=1/OR,
OR_upr = 1/exp(beta1_lwr + gam1_lwr*gpa),
OR_lwr = 1/exp(beta1_upr + gam1_upr*gpa) ) -> pred_line
## Check inversion, it works for OR, but not for confidence limits?
## CIs don't really work like this, do they?
ggplot(data=pred_line, aes(x=gpa, y=OR)) +
geom_line(col="orange") +
geom_ribbon(aes(ymin = OR_lwr, ymax = OR_upr), alpha = 0.3)
## filter lower values of gpa?
ggplot(data=pred_line %>% filter(gpa<2.5), aes(x=gpa, y=OR)) +
geom_line(col="orange") +
geom_ribbon(aes(ymin = OR_lwr, ymax = OR_upr), alpha = 0.3)
library(tidymodels)
nBoots <- 500 ## number of bootstrap samples
datSize <- nrow(dat)
replicate(nBoots,
sample_n(dat, datSize, replace=TRUE)) -> dat2Boots
apply(dat2Boots, 2,
function(D){polr(apply ~ public*gpa, Hess=TRUE, data=D) %>% tidy()}
) -> datPOLRs
obj_sum(datPOLRs)
datPOLRs[[1]]
datPOLRs %>% tibble(model=.) %>%
mutate(boot_ID = factor(row_number())) %>%
unnest(cols = c(model)) -> lmDataFrame
lmDataFrame %>% head(4) %>% kable()
lmDataFrame %>% dplyr::select(term, estimate, boot_ID) %>%
pivot_wider(names_from=term, values_from = estimate) %>%
dplyr::select(boot_ID, gpa_b = gpa, pub_b = public, int_c = `public:gpa`) -> lms2plot
gpa2pred <- tibble(gpa=rep(gpa_sort, nBoots), boot_ID=factor(rep(1:nBoots, each=datSize)))
lms2plot %>% right_join(gpa2pred, by="boot_ID") %>%
mutate(OR=1/exp(gpa_b + int_c*gpa)) -> pred_boots
ggplot(data=pred_boots, aes(x=gpa, y=OR, col=boot_ID)) +
geom_line() + theme(legend.position = "none")
## Simply too much uncertainty, especially at high gpa?
ggplot(data=pred_boots %>% filter(gpa<3), aes(x=gpa, y=OR, col=boot_ID)) +
geom_line() + theme(legend.position = "none")
ci_polr
beta1 <- -coef(test_polr)["public"]
gam1 <- -coef(test_polr)["public:gpa"]
ci_polr <- -confint(test_polr)
ci_polr
View(new_dat)
View(lms2plot)
ci_polr
View(pred_line)
exp(-2.8 - 2.03*1.9)
exp(-2.8 - 2.03*3)
ci_polr
confint(test_polr)
ci_polr
exp(6.65 + .89*2)
exp(6.65 + .89*3)
q()
q()
q()
q()
devtools::install_github("rmcelreath/rethinking")
install.packages(c("coda","mvtnorm","devtools","loo","dagitty","shape"))
install.packages(c("coda", "mvtnorm", "devtools", "loo", "dagitty", "shape"))
devtools::install_github("rmcelreath/rethinking")
q()
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages(c("coda", "mvtnorm", "devtools", "loo", "dagitty", "shape"))
devtools::install_github("rmcelreath/rethinking")
install_cmdstan()
library(cmdstanr)
install_cmdstan()
devtools::install_github("rmcelreath/rethinking")
devtools::install_github("rmcelreath/rethinking", force=TRUE)
library(cmdstanr)
?dens
??dens
library(rethinking)
1/2.08
library(tidyverse)
## Greek gods example from Hernan and Robins
un20_greek <- c("Rheia", "Kronos", "Demeter", "Hades", "Hestia", "Poseidon", "Hera",
"Zeus", "Artemis", "Apollo", "Leto", "Ares", "Athena", "Hephaestus",
"Aphrodite", "Cyclope", "Persephone", "Hermes", "Hebe", "Dionysus")
# p0_greek <- c(0,1,0,0,0,1,0,0,1,1,0,1,1,0,0,0,1,1,1,1)
# p1_greek <- c(1,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,0,0,0)
L_greek <- c(0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1)
A_greek <- c(0,0,0,0,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1)
Y_greek <- c(0,1,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,0,0,0)
# V_greek <- c(1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0)
## Build a table with unknonw potential outcomes
tibble(Unit=un20_greek, L=L_greek, A=A_greek, Y=Y_greek) %>%
mutate(`$Y^{a=0}$` = if_else(A==0, Y, NA_real_),
`$Y^{a=1}$` = if_else(A==1, Y, NA_real_),
U = NA_real_) %>%
{. ->> known_data}
toBits <- function (x, nBits = 20){
tail(rev(as.numeric(intToBits(x))),nBits)
}
check_exchange <- function(A, Y, U, zero_or_one) {
U0 <- which(U==zero_or_one)
A0 <- A[U0]
Y0 <- Y[U0]
Y01 <- sum(Y0[which(A0 == 1)])
Y00 <- sum(Y0) - Y01
A01 <- sum(A0)
A00 <- length(A0) - A01
# check probabilities the same, and no 0 or 1 probabilities
Y01*A00 == Y00*A01 && Y01 > 0 && Y01 < A01 && Y00 > 0 && Y00 < A00
}
check_RR <- function(A, Y, U) {
pU1 <- sum(U)
pU0 <- length(U) - pU1
p111 <- mean(Y[which(A*U == 1)])
p110 <- mean(Y[which(A*(1-U) == 1)])
p101 <- mean(Y[which((1-A)*U == 1)])
p100 <- mean(Y[which((1-A)*(1-U) == 1)])
# check probabilities the same, and no 0 or 1 probabilities
p111*pU1 + p110*pU0 != p101*pU1 + p100*pU0 && !is.na(p111) && !is.na(p110) && !is.na(p101) && !is.na(p100) && p111 > 0 && p111 < 1 && p110 > 0 && p110 < 1 && p101 > 0 && p101 < 1 && p100 > 0 && p100 < 1
}
compute_RR <- function(A, Y, U) {
pU1 <- sum(U)
pU0 <- length(U) - pU1
p111 <- mean(Y[which(A*U == 1)])
p110 <- mean(Y[which(A*(1-U) == 1)])
p101 <- mean(Y[which((1-A)*U == 1)])
p100 <- mean(Y[which((1-A)*(1-U) == 1)])
(p111*pU1 + p110*pU0) / (p101*pU1 + p100*pU0)
}
check_Us <- function(A, Y, Us_to_test) {
Us <- rep(NA, length(Us_to_test)) # check all binary U vectors
for (ii in 1:length(Us_to_test)) {
U <- toBits(Us_to_test[ii] - 1)
if (check_exchange(A, Y, U, 0)){
if (check_exchange(A, Y, U, 1)) {
Us[ii] <- 1
}
}
}
Us_to_test[which(!is.na(Us))]
}
A <- known_data$A
Y <- known_data$Y
Us <- rep(NA, 2^20) # check all binary U vectors
for (ii in 1:length(Us)) {
U <- toBits(ii - 1)
if (check_RR(A, Y, U)) {
Us[ii] <- 1
}
}
useful_Us <- which(!is.na(Us))
Yt1 <- Y
Yt0 <- Y
Yt1s <- rep(NA, 2^7) # check all binary Y^1 vectors
for (jj in 1:length(Yt1s)) {
print(jj)
Ytparts <- toBits(jj - 1, 7)
Yt1[which(A == 0)] <- Ytparts
Us <- rep(NA, 2^20) # check all binary U vectors
useful_Us_t <- check_Us(A, Yt1, useful_Us)
print(length(useful_Us_t))
if (length(useful_Us_t) > 0) {
Yt0s <- rep(NA, 2^13) # check all binary Y^0 vectors
for (kk in 1:length(Yt0s)) {
Ytparts <- toBits(kk - 1, 13)
Yt0[which(A == 1)] <- Ytparts
useful_Us_t_all <- check_Us(A, Yt0, useful_Us_t)
if (length(useful_Us_t_all) > 0) {
print(length(useful_Us_t_all))
print(Yt0)
print(Yt1)
U <- toBits(useful_Us_t_all[1] - 1)
print(U)
stop()
}
}
}
}
Yt0
Yt1
U
compute_RR(A, Y, U)
sum(Yt1)/sum(Yt0)
U <- toBits(useful_Us_t_all[2] - 1)
compute_RR(A, Y, U)
sum(Yt1)/sum(Yt0)
length(U)
length(useful_Us_t_all)
U <- toBits(useful_Us_t_all[756] - 1)
compute_RR(A, Y, U)
sum(Yt1)/sum(Yt0)
U <- toBits(useful_Us_t_all[755] - 1)
compute_RR(A, Y, U)
sum(Yt1)/sum(Yt0)
U <- toBits(useful_Us_t_all[754] - 1)
compute_RR(A, Y, U)
sum(Yt1)/sum(Yt0)
U <- toBits(useful_Us_t_all[500] - 1)
compute_RR(A, Y, U)
sum(Yt1)/sum(Yt0)
U
U <- toBits(useful_Us_t_all[754] - 1)
U
A
Y
90/5*12
(90/5)*12
(11.69/52)*72
(11.69/60)*80
q()
q()
q()
pandoc_version()
library(rmarkdown)
pandoc_version()
pandoc_version()
q()
?hitSpikey
?histSpike
knitr::include_graphics(file.path(path2media, "byDesign.jpeg"))
# setwd("~/Documents/jInFieri/myRepo/2021on_eventsNotes/2023_basel_rds")
path2media <- "../gig_in_files"
knitr::include_graphics(file.path(path2media, "byDesign.jpeg"))
## it seems to fail with figures in a different folder, but it works if images are in the same folder, see below
knitr::include_graphics('../gig_in_files/coinToss.png')
knitr::include_graphics("byDesign.jpeg")
?residuals
??residuals
?rms::residuals
library(rms)
install.packages(rms)
install.packages("rms")
?residuals
library(rms)
?residuals
?rms::residuals
(1-1/100)^100
?datadist
x <- seq(1:1000)
y <- x^3
plot(y~x)
x <- seq(-1000:1000)
y <- x^3
plot(y~x)
x <- seq(-1000:1000)
head(x)
?seq
seq(-100, 100, by=1)
x <- seq(-100, 100, by=1)
q()
q()
serve_site()
library(blogdown)
install.packages("blogdown")
library(blogdown)
serve_site()
getwd()
setwd("~/jData/jLibellus/entryFiles/annlia.github.io")
serve_site()
new_site()
new_content("jresearch/jresearch.Rmd")
serve_site()
options(
blogdown.use.processx = FALSE,
xfun.bg_process.verbose = TRUE
)
serve_site()
q()
